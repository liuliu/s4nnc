// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorboard/compat/proto/resource_handle.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _3: SwiftProtobuf.ProtobufAPIVersion_3 {}
  typealias Version = _3
}

/// Protocol buffer representing a handle to a tensorflow resource. Handles are
/// not valid across executions, but can be serialized back and forth from within
/// a single run.
struct Tensorboard_ResourceHandleProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Unique name for the device containing the resource.
  var device: String = String()

  /// Container in which this resource is placed.
  var container: String = String()

  /// Unique name of this resource.
  var name: String = String()

  /// Hash code for the type of the resource. Is only valid in the same device
  /// and in the same execution.
  var hashCode: UInt64 = 0

  /// For debug-only, the name of the type pointed to by this handle, if
  /// available.
  var maybeTypeName: String = String()

  /// Data types and shapes for the underlying resource.
  var dtypesAndShapes: [Tensorboard_ResourceHandleProto.DtypeAndShape] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Protocol buffer representing a pair of (data type, tensor shape).
  struct DtypeAndShape {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var dtype: Tensorboard_DataType = .dtInvalid

    var shape: Tensorboard_TensorShapeProto {
      get {return _shape ?? Tensorboard_TensorShapeProto()}
      set {_shape = newValue}
    }
    /// Returns true if `shape` has been explicitly set.
    var hasShape: Bool {return self._shape != nil}
    /// Clears the value of `shape`. Subsequent reads from it will return its default value.
    mutating func clearShape() {self._shape = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _shape: Tensorboard_TensorShapeProto? = nil
  }

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Tensorboard_ResourceHandleProto: @unchecked Sendable {}
extension Tensorboard_ResourceHandleProto.DtypeAndShape: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorboard"

extension Tensorboard_ResourceHandleProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResourceHandleProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "device"),
    2: .same(proto: "container"),
    3: .same(proto: "name"),
    4: .standard(proto: "hash_code"),
    5: .standard(proto: "maybe_type_name"),
    6: .standard(proto: "dtypes_and_shapes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.device) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.container) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.hashCode) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.maybeTypeName) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.dtypesAndShapes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.device.isEmpty {
      try visitor.visitSingularStringField(value: self.device, fieldNumber: 1)
    }
    if !self.container.isEmpty {
      try visitor.visitSingularStringField(value: self.container, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if self.hashCode != 0 {
      try visitor.visitSingularUInt64Field(value: self.hashCode, fieldNumber: 4)
    }
    if !self.maybeTypeName.isEmpty {
      try visitor.visitSingularStringField(value: self.maybeTypeName, fieldNumber: 5)
    }
    if !self.dtypesAndShapes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dtypesAndShapes, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tensorboard_ResourceHandleProto, rhs: Tensorboard_ResourceHandleProto) -> Bool {
    if lhs.device != rhs.device {return false}
    if lhs.container != rhs.container {return false}
    if lhs.name != rhs.name {return false}
    if lhs.hashCode != rhs.hashCode {return false}
    if lhs.maybeTypeName != rhs.maybeTypeName {return false}
    if lhs.dtypesAndShapes != rhs.dtypesAndShapes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tensorboard_ResourceHandleProto.DtypeAndShape: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Tensorboard_ResourceHandleProto.protoMessageName + ".DtypeAndShape"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dtype"),
    2: .same(proto: "shape"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.dtype) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._shape) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.dtype != .dtInvalid {
      try visitor.visitSingularEnumField(value: self.dtype, fieldNumber: 1)
    }
    try { if let v = self._shape {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tensorboard_ResourceHandleProto.DtypeAndShape, rhs: Tensorboard_ResourceHandleProto.DtypeAndShape) -> Bool {
    if lhs.dtype != rhs.dtype {return false}
    if lhs._shape != rhs._shape {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
