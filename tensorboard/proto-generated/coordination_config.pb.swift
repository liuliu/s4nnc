// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorboard/compat/proto/coordination_config.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _3: SwiftProtobuf.ProtobufAPIVersion_3 {}
  typealias Version = _3
}

/// Coordination service configuration parameters.
/// The system picks appropriate values for fields that are not set.
struct Tensorboard_CoordinationServiceConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Type of coordination service implementation to enable.
  /// For example, setting the service type as "standalone" starts a service
  /// instance on the leader task to provide the coordination services such as
  /// heartbeats and consistent key-value store.
  var serviceType: String = String()

  /// Address where the coordination service instance is hosted.
  var serviceLeader: String = String()

  /// Whether to enable the health check mechanism.
  var enableHealthCheck: Bool = false

  /// Maximum wait time for all members in the cluster to be registered.
  var clusterRegisterTimeoutInMs: Int64 = 0

  /// Heartbeat timeout, if a task does not record heartbeat in this time
  /// window, it will be considered disconnected.
  /// Note: This is also used as a grace period to accept any heartbeats after
  /// the agent has disconnected, to account for the lag time between the service
  /// recording the state change and the agent stopping heartbeats.
  var heartbeatTimeoutInMs: Int64 = 0

  /// The list of jobs that partipate in the coordination service. If empty, all
  /// jobs will be included in the coordination service by default.
  var coordinatedJobs: [String] = []

  /// Denotes how long to wait for all coordination agents to reach the barriers
  /// (after the first shutdown request) before disconnecting together. If
  /// set to 0, no barrier is imposed upon shutdown and each worker can
  /// disconnect individually.
  var shutdownBarrierTimeoutInMs: Int64 = 0

  /// If set, agents do not make an explicit Shutdown() call. Service will only
  /// find out about the disconnecte agent via stale heartbeats. Used for
  /// testing.
  var agentDestructionWithoutShutdown: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Tensorboard_CoordinationServiceConfig: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorboard"

extension Tensorboard_CoordinationServiceConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CoordinationServiceConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_type"),
    2: .standard(proto: "service_leader"),
    3: .standard(proto: "enable_health_check"),
    4: .standard(proto: "cluster_register_timeout_in_ms"),
    5: .standard(proto: "heartbeat_timeout_in_ms"),
    6: .standard(proto: "coordinated_jobs"),
    7: .standard(proto: "shutdown_barrier_timeout_in_ms"),
    8: .standard(proto: "agent_destruction_without_shutdown"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.serviceType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.serviceLeader) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.enableHealthCheck) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.clusterRegisterTimeoutInMs) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.heartbeatTimeoutInMs) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.coordinatedJobs) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.shutdownBarrierTimeoutInMs) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.agentDestructionWithoutShutdown) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceType.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceType, fieldNumber: 1)
    }
    if !self.serviceLeader.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceLeader, fieldNumber: 2)
    }
    if self.enableHealthCheck != false {
      try visitor.visitSingularBoolField(value: self.enableHealthCheck, fieldNumber: 3)
    }
    if self.clusterRegisterTimeoutInMs != 0 {
      try visitor.visitSingularInt64Field(value: self.clusterRegisterTimeoutInMs, fieldNumber: 4)
    }
    if self.heartbeatTimeoutInMs != 0 {
      try visitor.visitSingularInt64Field(value: self.heartbeatTimeoutInMs, fieldNumber: 5)
    }
    if !self.coordinatedJobs.isEmpty {
      try visitor.visitRepeatedStringField(value: self.coordinatedJobs, fieldNumber: 6)
    }
    if self.shutdownBarrierTimeoutInMs != 0 {
      try visitor.visitSingularInt64Field(value: self.shutdownBarrierTimeoutInMs, fieldNumber: 7)
    }
    if self.agentDestructionWithoutShutdown != false {
      try visitor.visitSingularBoolField(value: self.agentDestructionWithoutShutdown, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tensorboard_CoordinationServiceConfig, rhs: Tensorboard_CoordinationServiceConfig) -> Bool {
    if lhs.serviceType != rhs.serviceType {return false}
    if lhs.serviceLeader != rhs.serviceLeader {return false}
    if lhs.enableHealthCheck != rhs.enableHealthCheck {return false}
    if lhs.clusterRegisterTimeoutInMs != rhs.clusterRegisterTimeoutInMs {return false}
    if lhs.heartbeatTimeoutInMs != rhs.heartbeatTimeoutInMs {return false}
    if lhs.coordinatedJobs != rhs.coordinatedJobs {return false}
    if lhs.shutdownBarrierTimeoutInMs != rhs.shutdownBarrierTimeoutInMs {return false}
    if lhs.agentDestructionWithoutShutdown != rhs.agentDestructionWithoutShutdown {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
