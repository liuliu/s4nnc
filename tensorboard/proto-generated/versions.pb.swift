// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorboard/compat/proto/versions.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _3: SwiftProtobuf.ProtobufAPIVersion_3 {}
  typealias Version = _3
}

/// Version information for a piece of serialized data
///
/// There are different types of versions for each type of data
/// (GraphDef, etc.), but they all have the same common shape
/// described here.
///
/// Each consumer has "consumer" and "min_producer" versions (specified
/// elsewhere).  A consumer is allowed to consume this data if
///
///   producer >= min_producer
///   consumer >= min_consumer
///   consumer not in bad_consumers
struct Tensorboard_VersionDef {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The version of the code that produced this data.
  var producer: Int32 = 0

  /// Any consumer below this version is not allowed to consume this data.
  var minConsumer: Int32 = 0

  /// Specific consumer versions which are disallowed (e.g. due to bugs).
  var badConsumers: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Tensorboard_VersionDef: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorboard"

extension Tensorboard_VersionDef: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VersionDef"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "producer"),
    2: .standard(proto: "min_consumer"),
    3: .standard(proto: "bad_consumers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.producer) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.minConsumer) }()
      case 3: try { try decoder.decodeRepeatedInt32Field(value: &self.badConsumers) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.producer != 0 {
      try visitor.visitSingularInt32Field(value: self.producer, fieldNumber: 1)
    }
    if self.minConsumer != 0 {
      try visitor.visitSingularInt32Field(value: self.minConsumer, fieldNumber: 2)
    }
    if !self.badConsumers.isEmpty {
      try visitor.visitPackedInt32Field(value: self.badConsumers, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tensorboard_VersionDef, rhs: Tensorboard_VersionDef) -> Bool {
    if lhs.producer != rhs.producer {return false}
    if lhs.minConsumer != rhs.minConsumer {return false}
    if lhs.badConsumers != rhs.badConsumers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
