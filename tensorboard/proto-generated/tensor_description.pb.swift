// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorboard/compat/proto/tensor_description.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _3: SwiftProtobuf.ProtobufAPIVersion_3 {}
  typealias Version = _3
}

struct Tensorboard_TensorDescription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Data type of tensor elements
  var dtype: Tensorboard_DataType = .dtInvalid

  /// Shape of the tensor.
  var shape: Tensorboard_TensorShapeProto {
    get {return _shape ?? Tensorboard_TensorShapeProto()}
    set {_shape = newValue}
  }
  /// Returns true if `shape` has been explicitly set.
  var hasShape: Bool {return self._shape != nil}
  /// Clears the value of `shape`. Subsequent reads from it will return its default value.
  mutating func clearShape() {self._shape = nil}

  /// Information about the size and allocator used for the data
  var allocationDescription: Tensorboard_AllocationDescription {
    get {return _allocationDescription ?? Tensorboard_AllocationDescription()}
    set {_allocationDescription = newValue}
  }
  /// Returns true if `allocationDescription` has been explicitly set.
  var hasAllocationDescription: Bool {return self._allocationDescription != nil}
  /// Clears the value of `allocationDescription`. Subsequent reads from it will return its default value.
  mutating func clearAllocationDescription() {self._allocationDescription = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _shape: Tensorboard_TensorShapeProto? = nil
  fileprivate var _allocationDescription: Tensorboard_AllocationDescription? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Tensorboard_TensorDescription: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorboard"

extension Tensorboard_TensorDescription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TensorDescription"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dtype"),
    2: .same(proto: "shape"),
    4: .standard(proto: "allocation_description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.dtype) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._shape) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._allocationDescription) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.dtype != .dtInvalid {
      try visitor.visitSingularEnumField(value: self.dtype, fieldNumber: 1)
    }
    try { if let v = self._shape {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._allocationDescription {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tensorboard_TensorDescription, rhs: Tensorboard_TensorDescription) -> Bool {
    if lhs.dtype != rhs.dtype {return false}
    if lhs._shape != rhs._shape {return false}
    if lhs._allocationDescription != rhs._allocationDescription {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
