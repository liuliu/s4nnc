// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorboard/compat/proto/cpp_shape_inference.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _3: SwiftProtobuf.ProtobufAPIVersion_3 {}
  typealias Version = _3
}

struct Tensorboard_CppShapeInferenceResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var shape: Tensorboard_TensorShapeProto {
    get {return _shape ?? Tensorboard_TensorShapeProto()}
    set {_shape = newValue}
  }
  /// Returns true if `shape` has been explicitly set.
  var hasShape: Bool {return self._shape != nil}
  /// Clears the value of `shape`. Subsequent reads from it will return its default value.
  mutating func clearShape() {self._shape = nil}

  var handleData: Tensorboard_CppShapeInferenceResult.HandleData {
    get {return _handleData ?? Tensorboard_CppShapeInferenceResult.HandleData()}
    set {_handleData = newValue}
  }
  /// Returns true if `handleData` has been explicitly set.
  var hasHandleData: Bool {return self._handleData != nil}
  /// Clears the value of `handleData`. Subsequent reads from it will return its default value.
  mutating func clearHandleData() {self._handleData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct HandleShapeAndType {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var shape: Tensorboard_TensorShapeProto {
      get {return _shape ?? Tensorboard_TensorShapeProto()}
      set {_shape = newValue}
    }
    /// Returns true if `shape` has been explicitly set.
    var hasShape: Bool {return self._shape != nil}
    /// Clears the value of `shape`. Subsequent reads from it will return its default value.
    mutating func clearShape() {self._shape = nil}

    var dtype: Tensorboard_DataType = .dtInvalid

    var type: Tensorboard_FullTypeDef {
      get {return _type ?? Tensorboard_FullTypeDef()}
      set {_type = newValue}
    }
    /// Returns true if `type` has been explicitly set.
    var hasType: Bool {return self._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
    mutating func clearType() {self._type = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _shape: Tensorboard_TensorShapeProto? = nil
    fileprivate var _type: Tensorboard_FullTypeDef? = nil
  }

  struct HandleData {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var isSet: Bool = false

    /// Only valid if <is_set>.
    var shapeAndType: [Tensorboard_CppShapeInferenceResult.HandleShapeAndType] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _shape: Tensorboard_TensorShapeProto? = nil
  fileprivate var _handleData: Tensorboard_CppShapeInferenceResult.HandleData? = nil
}

struct Tensorboard_CppShapeInferenceInputsNeeded {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var inputTensorsNeeded: [Int32] = []

  var inputTensorsAsShapesNeeded: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Tensorboard_CppShapeInferenceResult: @unchecked Sendable {}
extension Tensorboard_CppShapeInferenceResult.HandleShapeAndType: @unchecked Sendable {}
extension Tensorboard_CppShapeInferenceResult.HandleData: @unchecked Sendable {}
extension Tensorboard_CppShapeInferenceInputsNeeded: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorboard"

extension Tensorboard_CppShapeInferenceResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CppShapeInferenceResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "shape"),
    4: .standard(proto: "handle_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._shape) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._handleData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._shape {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._handleData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tensorboard_CppShapeInferenceResult, rhs: Tensorboard_CppShapeInferenceResult) -> Bool {
    if lhs._shape != rhs._shape {return false}
    if lhs._handleData != rhs._handleData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tensorboard_CppShapeInferenceResult.HandleShapeAndType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Tensorboard_CppShapeInferenceResult.protoMessageName + ".HandleShapeAndType"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "shape"),
    2: .same(proto: "dtype"),
    4: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._shape) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.dtype) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._shape {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.dtype != .dtInvalid {
      try visitor.visitSingularEnumField(value: self.dtype, fieldNumber: 2)
    }
    try { if let v = self._type {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tensorboard_CppShapeInferenceResult.HandleShapeAndType, rhs: Tensorboard_CppShapeInferenceResult.HandleShapeAndType) -> Bool {
    if lhs._shape != rhs._shape {return false}
    if lhs.dtype != rhs.dtype {return false}
    if lhs._type != rhs._type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tensorboard_CppShapeInferenceResult.HandleData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Tensorboard_CppShapeInferenceResult.protoMessageName + ".HandleData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_set"),
    2: .standard(proto: "shape_and_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isSet) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.shapeAndType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isSet != false {
      try visitor.visitSingularBoolField(value: self.isSet, fieldNumber: 1)
    }
    if !self.shapeAndType.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.shapeAndType, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tensorboard_CppShapeInferenceResult.HandleData, rhs: Tensorboard_CppShapeInferenceResult.HandleData) -> Bool {
    if lhs.isSet != rhs.isSet {return false}
    if lhs.shapeAndType != rhs.shapeAndType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tensorboard_CppShapeInferenceInputsNeeded: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CppShapeInferenceInputsNeeded"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "input_tensors_needed"),
    2: .standard(proto: "input_tensors_as_shapes_needed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedInt32Field(value: &self.inputTensorsNeeded) }()
      case 2: try { try decoder.decodeRepeatedInt32Field(value: &self.inputTensorsAsShapesNeeded) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.inputTensorsNeeded.isEmpty {
      try visitor.visitPackedInt32Field(value: self.inputTensorsNeeded, fieldNumber: 1)
    }
    if !self.inputTensorsAsShapesNeeded.isEmpty {
      try visitor.visitPackedInt32Field(value: self.inputTensorsAsShapesNeeded, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tensorboard_CppShapeInferenceInputsNeeded, rhs: Tensorboard_CppShapeInferenceInputsNeeded) -> Bool {
    if lhs.inputTensorsNeeded != rhs.inputTensorsNeeded {return false}
    if lhs.inputTensorsAsShapesNeeded != rhs.inputTensorsAsShapesNeeded {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
