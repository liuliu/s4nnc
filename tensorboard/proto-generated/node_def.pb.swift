// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorboard/compat/proto/node_def.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _3: SwiftProtobuf.ProtobufAPIVersion_3 {}
  typealias Version = _3
}

struct Tensorboard_NodeDef {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The name given to this operator. Used for naming inputs,
  /// logging, visualization, etc.  Unique within a single GraphDef.
  /// Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_>./]*".
  var name: String = String()

  /// The operation name.  There may be custom parameters in attrs.
  /// Op names starting with an underscore are reserved for internal use.
  var op: String = String()

  /// Each input is "node:src_output" with "node" being a string name and
  /// "src_output" indicating which output tensor to use from "node". If
  /// "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
  /// may optionally be followed by control inputs that have the format
  /// "^node".
  var input: [String] = []

  /// A (possibly partial) specification for the device on which this
  /// node should be placed.
  /// The expected syntax for this string is as follows:
  ///
  /// DEVICE_SPEC ::= PARTIAL_SPEC
  ///
  /// PARTIAL_SPEC ::= ("/" CONSTRAINT) *
  /// CONSTRAINT ::= ("job:" JOB_NAME)
  ///              | ("replica:" [1-9][0-9]*)
  ///              | ("task:" [1-9][0-9]*)
  ///              | ("device:" [A-Za-z]* ":" ([1-9][0-9]* | "*") )
  ///
  /// Valid values for this string include:
  /// * "/job:worker/replica:0/task:1/device:GPU:3"  (full specification)
  /// * "/job:worker/device:GPU:3"                   (partial specification)
  /// * ""                                    (no specification)
  ///
  /// If the constraints do not resolve to a single device (or if this
  /// field is empty or not present), the runtime will attempt to
  /// choose a device automatically.
  var device: String = String()

  /// Operation-specific graph-construction-time configuration.
  /// Note that this should include all attrs defined in the
  /// corresponding OpDef, including those with a value matching
  /// the default -- this allows the default to change and makes
  /// NodeDefs easier to interpret on their own.  However, if
  /// an attr with a default is not specified in this list, the
  /// default will be used.
  /// The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
  /// one of the names from the corresponding OpDef's attr field).
  /// The values must have a type matching the corresponding OpDef
  /// attr's type field.
  /// TODO(josh11b): Add some examples here showing best practices.
  var attr: Dictionary<String,Tensorboard_AttrValue> = [:]

  /// This stores debug information associated with the node.
  var experimentalDebugInfo: Tensorboard_NodeDef.ExperimentalDebugInfo {
    get {return _experimentalDebugInfo ?? Tensorboard_NodeDef.ExperimentalDebugInfo()}
    set {_experimentalDebugInfo = newValue}
  }
  /// Returns true if `experimentalDebugInfo` has been explicitly set.
  var hasExperimentalDebugInfo: Bool {return self._experimentalDebugInfo != nil}
  /// Clears the value of `experimentalDebugInfo`. Subsequent reads from it will return its default value.
  mutating func clearExperimentalDebugInfo() {self._experimentalDebugInfo = nil}

  /// The complete type of this node. Experimental and subject to change.
  /// Currently, the field only contains the return types of the node. That will
  /// extend in the future to contain the entire signature of the node, as a
  /// function type.
  var experimentalType: Tensorboard_FullTypeDef {
    get {return _experimentalType ?? Tensorboard_FullTypeDef()}
    set {_experimentalType = newValue}
  }
  /// Returns true if `experimentalType` has been explicitly set.
  var hasExperimentalType: Bool {return self._experimentalType != nil}
  /// Clears the value of `experimentalType`. Subsequent reads from it will return its default value.
  mutating func clearExperimentalType() {self._experimentalType = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct ExperimentalDebugInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Opaque string inserted into error messages created by the runtime.
    ///
    /// This is intended to store the list of names of the nodes from the
    /// original graph that this node was derived. For example if this node, say
    /// C, was result of a fusion of 2 nodes A and B, then 'original_node' would
    /// be {A, B}. This information can be used to map errors originating at the
    /// current node to some top level source code.
    var originalNodeNames: [String] = []

    /// This is intended to store the list of names of the functions from the
    /// original graph that this node was derived. For example if this node, say
    /// C, was result of a fusion of node A in function FA and node B in function
    /// FB, then `original_funcs` would be {FA, FB}. If the node is in the top
    /// level graph, the `original_func` is empty. This information, with the
    /// `original_node_names` can be used to map errors originating at the
    /// current ndoe to some top level source code.
    var originalFuncNames: [String] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _experimentalDebugInfo: Tensorboard_NodeDef.ExperimentalDebugInfo? = nil
  fileprivate var _experimentalType: Tensorboard_FullTypeDef? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Tensorboard_NodeDef: @unchecked Sendable {}
extension Tensorboard_NodeDef.ExperimentalDebugInfo: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorboard"

extension Tensorboard_NodeDef: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NodeDef"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "op"),
    3: .same(proto: "input"),
    4: .same(proto: "device"),
    5: .same(proto: "attr"),
    6: .standard(proto: "experimental_debug_info"),
    7: .standard(proto: "experimental_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.op) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.input) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.device) }()
      case 5: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Tensorboard_AttrValue>.self, value: &self.attr) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._experimentalDebugInfo) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._experimentalType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.op.isEmpty {
      try visitor.visitSingularStringField(value: self.op, fieldNumber: 2)
    }
    if !self.input.isEmpty {
      try visitor.visitRepeatedStringField(value: self.input, fieldNumber: 3)
    }
    if !self.device.isEmpty {
      try visitor.visitSingularStringField(value: self.device, fieldNumber: 4)
    }
    if !self.attr.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Tensorboard_AttrValue>.self, value: self.attr, fieldNumber: 5)
    }
    try { if let v = self._experimentalDebugInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._experimentalType {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tensorboard_NodeDef, rhs: Tensorboard_NodeDef) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.op != rhs.op {return false}
    if lhs.input != rhs.input {return false}
    if lhs.device != rhs.device {return false}
    if lhs.attr != rhs.attr {return false}
    if lhs._experimentalDebugInfo != rhs._experimentalDebugInfo {return false}
    if lhs._experimentalType != rhs._experimentalType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tensorboard_NodeDef.ExperimentalDebugInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Tensorboard_NodeDef.protoMessageName + ".ExperimentalDebugInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "original_node_names"),
    2: .standard(proto: "original_func_names"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.originalNodeNames) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.originalFuncNames) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.originalNodeNames.isEmpty {
      try visitor.visitRepeatedStringField(value: self.originalNodeNames, fieldNumber: 1)
    }
    if !self.originalFuncNames.isEmpty {
      try visitor.visitRepeatedStringField(value: self.originalFuncNames, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tensorboard_NodeDef.ExperimentalDebugInfo, rhs: Tensorboard_NodeDef.ExperimentalDebugInfo) -> Bool {
    if lhs.originalNodeNames != rhs.originalNodeNames {return false}
    if lhs.originalFuncNames != rhs.originalFuncNames {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
