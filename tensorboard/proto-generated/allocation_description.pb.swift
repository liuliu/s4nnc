// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorboard/compat/proto/allocation_description.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _3: SwiftProtobuf.ProtobufAPIVersion_3 {}
  typealias Version = _3
}

struct Tensorboard_AllocationDescription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Total number of bytes requested
  var requestedBytes: Int64 = 0

  /// Total number of bytes allocated if known
  var allocatedBytes: Int64 = 0

  /// Name of the allocator used
  var allocatorName: String = String()

  /// Identifier of the allocated buffer if known
  var allocationID: Int64 = 0

  /// Set if this tensor only has one remaining reference
  var hasSingleReference_p: Bool = false

  /// Address of the allocation.
  var ptr: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Tensorboard_AllocationDescription: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorboard"

extension Tensorboard_AllocationDescription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AllocationDescription"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "requested_bytes"),
    2: .standard(proto: "allocated_bytes"),
    3: .standard(proto: "allocator_name"),
    4: .standard(proto: "allocation_id"),
    5: .standard(proto: "has_single_reference"),
    6: .same(proto: "ptr"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.requestedBytes) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.allocatedBytes) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.allocatorName) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.allocationID) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.hasSingleReference_p) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.ptr) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.requestedBytes != 0 {
      try visitor.visitSingularInt64Field(value: self.requestedBytes, fieldNumber: 1)
    }
    if self.allocatedBytes != 0 {
      try visitor.visitSingularInt64Field(value: self.allocatedBytes, fieldNumber: 2)
    }
    if !self.allocatorName.isEmpty {
      try visitor.visitSingularStringField(value: self.allocatorName, fieldNumber: 3)
    }
    if self.allocationID != 0 {
      try visitor.visitSingularInt64Field(value: self.allocationID, fieldNumber: 4)
    }
    if self.hasSingleReference_p != false {
      try visitor.visitSingularBoolField(value: self.hasSingleReference_p, fieldNumber: 5)
    }
    if self.ptr != 0 {
      try visitor.visitSingularUInt64Field(value: self.ptr, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tensorboard_AllocationDescription, rhs: Tensorboard_AllocationDescription) -> Bool {
    if lhs.requestedBytes != rhs.requestedBytes {return false}
    if lhs.allocatedBytes != rhs.allocatedBytes {return false}
    if lhs.allocatorName != rhs.allocatorName {return false}
    if lhs.allocationID != rhs.allocationID {return false}
    if lhs.hasSingleReference_p != rhs.hasSingleReference_p {return false}
    if lhs.ptr != rhs.ptr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
