// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorboard/compat/proto/graph.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Represents the graph of operations
struct Tensorboard_GraphDef: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var node: [Tensorboard_NodeDef] = []

  /// Compatibility versions of the graph.  See core/public/version.h for version
  /// history.  The GraphDef version is distinct from the TensorFlow version, and
  /// each release of TensorFlow will support a range of GraphDef versions.
  var versions: Tensorboard_VersionDef {
    get {return _versions ?? Tensorboard_VersionDef()}
    set {_versions = newValue}
  }
  /// Returns true if `versions` has been explicitly set.
  var hasVersions: Bool {return self._versions != nil}
  /// Clears the value of `versions`. Subsequent reads from it will return its default value.
  mutating func clearVersions() {self._versions = nil}

  /// Deprecated single version field; use versions above instead.  Since all
  /// GraphDef changes before "versions" was introduced were forward
  /// compatible, this field is entirely ignored.
  ///
  /// NOTE: This field was marked as deprecated in the .proto file.
  var version: Int32 = 0

  /// "library" provides user-defined functions.
  ///
  /// Naming:
  ///   * library.function.name are in a flat namespace.
  ///     NOTE: We may need to change it to be hierarchical to support
  ///     different orgs. E.g.,
  ///     { "/google/nn", { ... }},
  ///     { "/google/vision", { ... }}
  ///     { "/org_foo/module_bar", { ... }}
  ///     map<string, FunctionDefLib> named_lib;
  ///   * If node[i].op is the name of one function in "library",
  ///     node[i] is deemed as a function call. Otherwise, node[i].op
  ///     must be a primitive operation supported by the runtime.
  ///
  ///
  /// Function call semantics:
  ///
  ///   * The callee may start execution as soon as some of its inputs
  ///     are ready. The caller may want to use Tuple() mechanism to
  ///     ensure all inputs are ready in the same time.
  ///
  ///   * The consumer of return values may start executing as soon as
  ///     the return values the consumer depends on are ready.  The
  ///     consumer may want to use Tuple() mechanism to ensure the
  ///     consumer does not start until all return values of the callee
  ///     function are ready.
  var library: Tensorboard_FunctionDefLibrary {
    get {return _library ?? Tensorboard_FunctionDefLibrary()}
    set {_library = newValue}
  }
  /// Returns true if `library` has been explicitly set.
  var hasLibrary: Bool {return self._library != nil}
  /// Clears the value of `library`. Subsequent reads from it will return its default value.
  mutating func clearLibrary() {self._library = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _versions: Tensorboard_VersionDef? = nil
  fileprivate var _library: Tensorboard_FunctionDefLibrary? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorboard"

extension Tensorboard_GraphDef: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GraphDef"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "node"),
    4: .same(proto: "versions"),
    3: .same(proto: "version"),
    2: .same(proto: "library"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.node) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._library) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.version) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._versions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.node.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.node, fieldNumber: 1)
    }
    try { if let v = self._library {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.version != 0 {
      try visitor.visitSingularInt32Field(value: self.version, fieldNumber: 3)
    }
    try { if let v = self._versions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tensorboard_GraphDef, rhs: Tensorboard_GraphDef) -> Bool {
    if lhs.node != rhs.node {return false}
    if lhs._versions != rhs._versions {return false}
    if lhs.version != rhs.version {return false}
    if lhs._library != rhs._library {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
